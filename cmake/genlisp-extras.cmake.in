if(@PACKAGE_NAME@_SOURCE_DIR)
  find_program_required(GENLISP_BIN gen_lisp.py PATHS ${@PACKAGE_NAME@_SOURCE_DIR}/scripts)
  set(GENLISP_TEMPLATE_DIR ${@PACKAGE_NAME@_SOURCE_DIR}/scripts)
else()
  find_program_required(GENLISP_BIN gen_lisp.py
    PATHS @CMAKE_INSTALL_PREFIX@/share/genlisp/bin)
  set(GENLISP_TEMPLATE_DIR @CMAKE_INSTALL_PREFIX@/share/genlisp)
endif()

# Generate .msg or .srv -> .lisp
# The generated .lisp files should be added ALL_GEN_OUTPUT_FILES_lisp
macro(_generate_lisp ARG_PKG ARG_MSG ARG_IFLAGS ARG_MSG_DEPS ARG_GEN_OUTPUT_DIR)
  file(MAKE_DIRECTORY ${ARG_GEN_OUTPUT_DIR})

  #Create input and output filenames
  get_filename_component(MSG_NAME ${ARG_MSG} NAME)
  get_filename_component(MSG_SHORT_NAME ${ARG_MSG} NAME_WE)

  set(MSG_GENERATED_NAME ${MSG_SHORT_NAME}.lisp)
  set(GEN_OUTPUT_FILE ${ARG_GEN_OUTPUT_DIR}/${MSG_GENERATED_NAME})

  assert(CATKIN_ENV)
  add_custom_command(OUTPUT ${GEN_OUTPUT_FILE}
    DEPENDS ${GENLISP_BIN} ${ARG_MSG} ${ARG_MSG_DEPS}
    COMMAND ${CATKIN_ENV} ${PYTHON_EXECUTABLE} ${GENLISP_BIN} ${ARG_MSG}
    ${ARG_IFLAGS}
    -p ${ARG_PKG}
    -o ${ARG_GEN_OUTPUT_DIR}
    COMMENT "Generating Lisp code from ${ARG_PKG}/${MSG_NAME}"
    )

  list(APPEND ALL_GEN_OUTPUT_FILES_lisp ${GEN_OUTPUT_FILE})

endmacro()

#genlisp uses the same program to generate srv and msg files, so call the same macro
macro(_generate_msg_lisp ARG_PKG ARG_MSG ARG_IFLAGS ARG_MSG_DEPS ARG_GEN_OUTPUT_DIR)
  _generate_lisp(${ARG_PKG} ${ARG_MSG} "${ARG_IFLAGS}" "${ARG_MSG_DEPS}" "${ARG_GEN_OUTPUT_DIR}/msg")
endmacro()

#genlisp uses the same program to generate srv and msg files, so call the same macro
macro(_generate_srv_lisp ARG_PKG ARG_SRV ARG_IFLAGS ARG_MSG_DEPS ARG_GEN_OUTPUT_DIR)
  _generate_lisp(${ARG_PKG} ${ARG_SRV} "${ARG_IFLAGS}" "${ARG_MSG_DEPS}" "${ARG_GEN_OUTPUT_DIR}/srv")
endmacro()

macro(_generate_module_lisp ARG_PKG ARG_GEN_OUTPUT_DIR ARG_GENERATED_FILES)
  set(GEN_ASDF_SYSTEMS_DIR ${ARG_GEN_OUTPUT_DIR}/../systems)
  file(MAKE_DIRECTORY ${GEN_ASDF_SYSTEMS_DIR})

  install(CODE
    "file(MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/${common_lisp_INSTALL_DIR}/systems)")
  foreach(type "msg" "srv")
    set(GEN_OUTPUT_DIR ${ARG_GEN_OUTPUT_DIR}/${type})
    set(GEN_OUTPUT_FILE ${ARG_GEN_OUTPUT_DIR}/${type}/${ARG_PKG}-${type}.asd)

    if(IS_DIRECTORY ${GEN_OUTPUT_DIR})
      add_custom_command(OUTPUT ${GEN_OUTPUT_FILE}
        DEPENDS ${GENLISP_BIN} ${ARG_GENERATED_FILES}
        COMMAND ${CATKIN_ENV} ${PYTHON_EXECUTABLE} ${GENLISP_BIN}
          ${MSG_I_FLAGS} -o ${GEN_OUTPUT_DIR} -p ${ARG_PKG} --${type}-asd ${ARG_GENERATED_FILES}
        COMMAND ln -fs ${GEN_OUTPUT_FILE} ${GEN_ASDF_SYSTEMS_DIR}
        COMMENT "Generating Lisp ${type} asd file for ${ARG_PKG}")
      list(APPEND ALL_GEN_OUTPUT_FILES_lisp ${GEN_OUTPUT_FILE})
      install(CODE
        "execute_process(
           COMMAND ln -s ../ros/${PROJECT_NAME}/${type}/${PROJECT_NAME}-${type}.asd ${CMAKE_INSTALL_PREFIX}/${common_lisp_INSTALL_DIR}/systems/${PROJECT_NAME}-${type}.asd)")
    endif()
  endforeach()
endmacro()

set(common_lisp_INSTALL_DIR share/common-lisp)
set(genlisp_INSTALL_DIR ${common_lisp_INSTALL_DIR}/ros)
